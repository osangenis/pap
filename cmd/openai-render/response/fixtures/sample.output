Sure! Here's an example implementation of the gRPC API service based on the given `hello.proto` file.

In `hello.proto`:
```protobuf
/**
* Hello World API service
*
* Just an experimenting API that will ping what you send
*/
syntax = "proto3";

package hello;

option go_package = "github.com/osangenis/hello";

message PingRequest {
  string in = 1;
}

message PingResponse {
  string out = 1;
}

// Hello Service
service HelloService {
  // Returns the same string that was sent
  rpc Ping(PingRequest) returns (PingResponse);
}
```

In `cmd/main.go`:
```go
...
package main

import (
	"fmt"
	"log"
	"net"
	"os"

	"github.com/osangenis/hello/hello"
	"google.golang.org/grpc"
)

func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	listenAddr := fmt.Sprintf(":%s", port)
	lis, err := net.Listen("tcp", listenAddr)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	grpcServer := grpc.NewServer()
	helloService := hello.NewHelloServiceServer()
	hello.RegisterHelloServiceServer(grpcServer, helloService)

	log.Printf("Server listening on port %s", port)
	if err := grpcServer.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
```

In `hello/ping.go`:
```go
...
package hello

import (
	"context"
)

type HelloServiceServer struct {
}

// NewHelloServiceServer creates a new instance of HelloServiceServer.
func NewHelloServiceServer() *HelloServiceServer {
	return &HelloServiceServer{}
}

// Ping implements the Ping gRPC method.
func (s *HelloServiceServer) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {
	return &PingResponse{
		Out: req.In,
	}, nil
}
```

To run the service, use the command `go run cmd/main.go` in the root directory of the project.
